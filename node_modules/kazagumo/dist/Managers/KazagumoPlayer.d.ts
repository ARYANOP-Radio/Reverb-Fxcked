import { Kazagumo } from '../Kazagumo';
import { KazagumoQueue } from './Supports/KazagumoQueue';
import { Player, Filters } from 'shoukaku';
import { KazagumoPlayerOptions, PlayerState, PlayOptions, KazagumoSearchOptions, KazagumoSearchResult } from '../Modules/Interfaces';
import KazagumoTrack from './Supports/KazagumoTrack';
export default class KazagumoPlayer {
    private readonly customData;
    /**
     * Kazagumo options
     */
    private options;
    /**
     * Kazagumo Instance
     */
    private kazagumo;
    /**
     * Shoukaku's Player instance
     */
    shoukaku: Player;
    /**
     * The guild Id of the player
     */
    readonly guildId: string;
    /**
     * The voice channel Id of the player
     */
    voiceId: string | null;
    /**
     * The text channel Id of the player
     */
    textId: string;
    /**
     * Player's queue
     */
    readonly queue: KazagumoQueue;
    /**
     * Get the current state of the player
     */
    state: PlayerState;
    /**
     * Paused state of the player
     */
    paused: boolean;
    /**
     * Whether the player is playing or not
     */
    playing: boolean;
    /**
     * Loop status
     */
    loop: 'none' | 'queue' | 'track';
    /**
     * Search track/s
     */
    search: (query: string, options?: KazagumoSearchOptions) => Promise<KazagumoSearchResult>;
    /**
     * Player's custom data
     */
    readonly data: Map<string, any>;
    /**
     * Initialize the player
     * @param kazagumo Kazagumo instance
     * @param player Shoukaku's Player instance
     * @param options Kazagumo options
     */
    constructor(kazagumo: Kazagumo, player: Player, options: KazagumoPlayerOptions, customData: unknown);
    /**
     * Get volume
     */
    get volume(): number;
    /**
     * Get filters
     */
    get filters(): Filters;
    private get node();
    private send;
    /**
     * Pause the player
     * @param pause Whether to pause or not
     * @returns KazagumoPlayer
     */
    pause(pause: boolean): KazagumoPlayer;
    /**
     * Set text channel
     * @param textId Text channel Id
     * @returns KazagumoPlayer
     */
    setTextChannel(textId: string): KazagumoPlayer;
    /**
     * Set voice channel and move the player to the voice channel
     * @param voiceId Voice channel Id
     * @returns KazagumoPlayer
     */
    setVoiceChannel(voiceId: string): KazagumoPlayer;
    /**
     * Set loop mode
     * @param [loop] Loop mode
     * @returns KazagumoPlayer
     */
    setLoop(loop?: 'none' | 'queue' | 'track'): KazagumoPlayer;
    /**
     * Play a track
     * @param track Track to play
     * @param options Play options
     * @returns KazagumoPlayer
     */
    play(track?: KazagumoTrack, options?: PlayOptions): Promise<KazagumoPlayer>;
    /**
     * Skip the current track
     * @returns KazagumoPlayer
     */
    skip(): KazagumoPlayer;
    /**
     * Set the volume
     * @param volume Volume
     * @returns KazagumoPlayer
     */
    setVolume(volume: number): KazagumoPlayer;
    /**
     * Connect to the voice channel
     * @returns KazagumoPlayer
     */
    connect(): KazagumoPlayer;
    /**
     * Disconnect from the voice channel
     * @returns KazagumoPlayer
     */
    disconnect(): KazagumoPlayer;
    /**
     * Destroy the player
     * @returns KazagumoPlayer
     */
    destroy(): KazagumoPlayer;
    private emit;
}
